{"version":3,"sources":["../src/translate.js"],"names":[],"mappings":";;;;;;;;;;AAGO,SAAS,SAAS,CAAE,YAAY,EAAE,GAAG,EAAE,OAAO,EAA0C;MAAxC,OAAO,yDAAG,EAAE,kBAAkB,EAAE,IAAI,EAAE;;AAC3F,MAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;AACpC,WAAO,EAAE,CAAC;GACX;;AAED,MAAI,WAAW,GAAG,YAAY,CAAC;;AAE/B,KAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;;;;;;;AAErB,yBAAc,GAAG,8HAAE;UAAV,CAAC;;AACR,UAAI,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAAE;AAChC,SAAC,GAAG,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,UAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAK;AACzD,iBAAU,MAAM,SAAI,KAAK,CAAC,WAAW,EAAE,CAAE;SAC1C,CAAC,CAAC;OACJ;;AAED,OAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;;AAEpB,UAAI;AACF,mBAAW,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;;AAE7B,YAAI,WAAW,KAAK,SAAS,EAAE;AAC7B,iBAAO,EAAE,CAAC;SACX;OACF,CAAC,OAAO,CAAC,EAAE;AACV,eAAO,EAAE,CAAC;OACX;KACF;;;;;;;;;;;;;;;;AAED,MAAI,CAAC,CAAC,OAAO,EAAE;AACb,QAAI,OAAO,OAAO,KAAK,QAAQ,EAAE;AAC/B,WAAK,IAAI,IAAG,IAAI,OAAO,EAAE;AACvB,YAAI,KAAK,GAAG,OAAO,CAAC,IAAG,CAAC,CAAC;;AAEzB,mBAAW,GAAG,WAAW,CAAC,OAAO,CAAC,IAAI,GAAG,IAAG,GAAG,GAAG,EAAE,KAAK,CAAC,CAAC;OAC5D;KACF,MAAM;AACL,iBAAW,GAAG,WAAW,CAAC,OAAO,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;KAC/D;GACF;;AAED,SAAO,WAAW,CAAC;CACpB","file":"translate.js","sourcesContent":["// app.translate('foo.bar') renders this.translations.foo.bar\n// app.translate('foo.bar', 'baz') renders this.translations.foo.bar, replacing any ${} syntax with 'baz'\n// app.translate('foo.bar', { hello: 'world' }) renders this.translations.foo.bar, replacing ${hello} with 'world'\nexport function translate (translations, key, replace, options = { translateCamelCase: true }) {\n  if (typeof translations !== 'object') {\n    return '';\n  }\n\n  let translation = translations;\n\n  key = key.split('.');\n\n  for (let k of key) {\n    if (!!options.translateCamelCase) {\n      k = k.replace(/([a-z])([A-Z])/g, (match, before, after) => {\n        return `${before}_${after.toLowerCase()}`\n      });\n    }\n\n    k = k.toLowerCase();\n\n    try {\n      translation = translation[k];\n\n      if (translation === undefined) {\n        return '';\n      }\n    } catch (e) {\n      return '';\n    }\n  }\n\n  if (!!replace) {\n    if (typeof replace === 'object') {\n      for (let key in replace) {\n        let value = replace[key];\n\n        translation = translation.replace('${' + key + '}', value);\n      }\n    } else {\n      translation = translation.replace(/\\$\\{[\\w\\d]+\\}/gi, replace);\n    }\n  }\n\n  return translation;\n}"]}